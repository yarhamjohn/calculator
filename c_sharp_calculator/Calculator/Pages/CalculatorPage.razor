@page "/calculator"

<h1 class="mb-5">Calculator</h1>

<Display Calculation=@GetCalculation() Result=@GetResult() />
<Keypad Update=@Update />

@code {
    private List<string> currentInput = new List<string>();
    private List<string> currentCalculation = new List<string>();
    private List<List<string>> allCalculations = new List<List<string>>();
    private List<string> operators = new List<string> { "+", "-", "x", "รท" };

    private void Update(Button button)
    {
        var finishedPreviousCalculation = currentCalculation.Count > 0 && currentCalculation[currentCalculation.Count - 1] == "=";
        if (finishedPreviousCalculation)
        {
            var previousCalculation = (string[])currentCalculation.ToArray().Clone();
            allCalculations.Add(previousCalculation.ToList());

            var startingNewCalculation = button.DisplayText != "=";
            if (startingNewCalculation)
            {
                currentCalculation = new List<string>();
                currentInput = new List<string>();
            }
        }

        updateCurrentCalculation(button);
    }

    private List<string> GetCalculation()
    {
        var nextCalculationNotStarted = allCalculations.Count > 0 && currentCalculation.Count == 0;
        if (nextCalculationNotStarted) { return allCalculations.Last(); }
        return currentCalculation;
    }

    private string GetResult()
    {
        var calculation = currentCalculation.Count == 0 ? currentInput : currentCalculation;
        if (calculation.Count == 0)
        {
            return "0";
        }

        if (IsADecimal(calculation))
        {
            return string.Join("", calculation).Trim();
        }

        List<string> chunks = GetCalculationChunks(calculation);

        decimal runningTotal = 0;
        string activeOperator = null;
        for (int i = 0; i < chunks.Count; i++)
        {
            var isDecimal = Decimal.TryParse(chunks[i], out var chunk);

            if (isDecimal && activeOperator == null)
            {
                runningTotal = chunk;
            }
            else if (isDecimal && activeOperator != null)
            {
                switch (activeOperator)
                {
                    case "+":
                        runningTotal += chunk;
                        break;
                    case "-":
                        runningTotal -= chunk;
                        break;
                    case "x":
                        runningTotal *= chunk;
                        break;
                    case "รท":
                        runningTotal /= chunk;
                        break;
                }
            }
            else
            {
                activeOperator = chunks[i];
            }
        }

        return runningTotal.ToString();
    }

    private List<string> GetCalculationChunks(List<string> calculation)
    {
        StringBuilder activeChunk = new StringBuilder();
        List<string> chunks = new List<string>();

        for (int i = 0; i < calculation.Count; i++)
        {
            if (IsADecimal(new List<string> { calculation[i] }))
            {
                activeChunk.Append(calculation[i]);
            }
            else
            {
                chunks.Add(activeChunk.ToString());
                activeChunk.Clear();
                chunks.Add(calculation[i]);
            }
        }

        return chunks;
    }

    private void updateCurrentCalculation(Button button)
    {
        if (button.DisplayText == ".")
        {
            HandleDecimal();
            return;
        }

        if (button.DisplayText == "+/-")
        {
            HandleSignChange();
            return;
        }

        if (button.DisplayText == "=")
        {
            HandleEquals();
            Promote();
            return;
        }

        if (operators.Contains(button.DisplayText))
        {
            if (currentInput.Count == 0)
            {
                currentInput.AddRange(new List<string> { "0", button.DisplayText });
                return;
            }
            else if (operators.Contains(currentInput[currentInput.Count - 1]))
            {
                ReplaceLastOperator(button.DisplayText);
            }

            Promote();

        }

        HandleNumber(button.DisplayText);
    }

    private void Promote()
    {
        currentCalculation = ((string[])currentInput.ToArray().Clone()).ToList();
    }

    private void HandleNumber(string displayText)
    {
        if (currentInput.Count == 0)
        {
            currentInput.Add(displayText);
            return;
        }

        if (currentInput[currentInput.Count - 1] == "=")
        {
            return;
        }

        currentInput.Add(displayText);
        return;
    }

    private void HandleEquals()
    {
        if (currentInput.Count == 0)
        {
            currentInput.AddRange(new List<string> { "0", "=" });
            return;
        }
        else if (currentInput[currentInput.Count - 1] == "=")
        {
            currentInput = GetResult().Split().ToList();
            currentInput.Add("=");
            return;
        }

        currentInput.Add("=");
        return;
    }

    private void HandleDecimal()
    {
        if (currentInput.Contains("."))
        {
            return;
        }

        if (currentInput.Count() == 0)
        {
            currentInput.AddRange(new[] { "0", "." });
            return;
        }

        currentInput.Add(".");
        return;
    }

    private void HandleSignChange()
    {
        if (currentInput.Count == 0) { return; }

        if (currentInput[0] == "-")
        {
            currentInput.RemoveAt(0);
            return;
        }

        currentInput.Insert(0, "-");
        return;
    }

    private void ReplaceLastOperator(string displayText)
    {
        currentInput.RemoveAt(currentInput.Count - 1);
        currentInput.Add(displayText);
    }

    private bool IsADecimal(List<string> calculation)
    {
        return calculation
        .Distinct()
        .Except(new List<string> { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "-" })
        .Count() == 0;
    }
}