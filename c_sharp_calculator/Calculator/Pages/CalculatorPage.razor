@page "/calculator"

<h1 class="mb-5">Calculator</h1>

<Display Calculation=@GetCalculationToDisplay() Input=@currentInput />
<Keypad Update=@Update />

@code {
    private List<string> currentCalculation = new List<string>();
    private List<List<string>> allCompletedCalculations = new List<List<string>>();

    private List<string> currentInput = new List<string>() { "0" };
    private bool inputIsReplaceable = true;
    private List<string> operators = new List<string> { "+", "-", "x", "รท" };

    private List<string> GetCalculationToDisplay()
    {
        if (currentCalculation.Count == 0 && allCompletedCalculations.Count > 0)
        {
            if (inputIsReplaceable || lastCalculationIsASimpleDecimal())
            {
                return allCompletedCalculations.Last();
            }
        }

        return currentCalculation;
    }

    private bool lastCalculationIsASimpleDecimal()
    {
        var lastCalc = ((string[])allCompletedCalculations.Last().ToArray().Clone()).ToList();
        var calc = lastCalc.Where(c => c != "=").ToList();

        return IsADecimal(calc);
    }

    //TODO precedence...
    private List<string> GetResult()
    {
        var calculation = currentCalculation.Count == 0 ? currentInput : currentCalculation;
        if (calculation.Count == 0)
        {
            return new List<string> { "0" };
        }

        if (IsADecimal(calculation))
        {
            return calculation;
        }

        List<string> chunks = GetCalculationChunks(calculation);

        decimal runningTotal = 0;
        string activeOperator = null;
        for (int i = 0; i < chunks.Count; i++)
        {
            var isDecimal = Decimal.TryParse(chunks[i], out var chunk);

            if (isDecimal && activeOperator == null)
            {
                runningTotal = chunk;
            }
            else if (isDecimal && activeOperator != null)
            {
                switch (activeOperator)
                {
                    case "+":
                        runningTotal += chunk;
                        break;
                    case "-":
                        runningTotal -= chunk;
                        break;
                    case "x":
                        runningTotal *= chunk;
                        break;
                    case "รท":
                        runningTotal /= chunk;
                        break;
                }
            }
            else
            {
                activeOperator = chunks[i];
            }
        }

        return runningTotal.ToString().Select(c => c.ToString()).ToList();

    }

    private List<string> GetCalculationChunks(List<string> calculation)
    {
        StringBuilder activeChunk = new StringBuilder();
        List<string> chunks = new List<string>();

        for (int i = 0; i < calculation.Count; i++)
        {
            if (IsADecimal(new List<string> { calculation[i] }))
            {
                activeChunk.Append(calculation[i]);
            }
            else
            {
                chunks.Add(activeChunk.ToString());
                activeChunk.Clear();
                chunks.Add(calculation[i]);
            }
        }

        return chunks;
    }

    private void ResetCalculator()
    {
        currentCalculation.Clear();
        allCompletedCalculations.Clear();
        ResetInput();
    }

    private void ResetInput()
    {
        currentInput = new List<string>() { "0" };
        inputIsReplaceable = true;
    }

    private void Update(Button button)
    {
        if (button.DisplayText == "C")
        {
            ResetCalculator();
            return;
        }

        if (button.DisplayText == "CE")
        {
            ResetInput();
            return;
        }

        if (button.DisplayText == "<-")
        {
            HandleBackspace();
            return;
        }

        if (button.DisplayText == ".")
        {
            HandleDecimal();
            return;
        }

        if (button.DisplayText == "+/-")
        {
            HandleSignChange();
            return;
        }

        if (button.DisplayText == "=")
        {
            HandleEquals();
            return;
        }

        if (operators.Contains(button.DisplayText))
        {
            HandleOperator(button.DisplayText);
            return;
        }

        HandleNumber(button.DisplayText);
    }

    private void HandleBackspace()
    {
        currentInput.RemoveAt(currentInput.Count - 1);

        var onlyNegativeSignRemains = currentInput.Count == 1 && currentInput[0] == "-";
        if (onlyNegativeSignRemains || currentInput.Count == 0)
        {
            ResetInput();
        }

        return;
    }

    private void HandleNumber(string displayText)
    {
        if (inputIsReplaceable)
        {
            currentInput.Clear();
        }

        currentInput.Add(displayText);
        inputIsReplaceable = false;
        return;
    }

    private void HandleOperator(string displayText)
    {
        if (currentCalculation.Count == 0)
        {
            //TODO: this is a horrible way to add the inputToDisplay to the currentCalculation
            currentCalculation = ((string[])currentInput.ToArray().Clone()).ToList().Concat(new List<string> { displayText }).ToList();
        }
        else if (operators.Contains(currentCalculation[currentCalculation.Count - 1]))
        {
            if (inputIsReplaceable)
            {
                ReplaceLastOperator(displayText);
            }
            else
            {
                currentCalculation.AddRange(((string[])currentInput.ToArray().Clone()).ToList().Concat(new List<string> { displayText }).ToList());
            }
        }
        else
        {
            currentCalculation.Add(displayText);
        }

        currentInput = GetResult();
        inputIsReplaceable = true;
        return;
    }

    private void HandleEquals()
    {
        if (currentCalculation.Count == 0)
        {
            currentCalculation = ((string[])currentInput.ToArray().Clone()).ToList().Concat(new List<string> { "=" }).ToList();
        }
        else if (currentCalculation[currentCalculation.Count - 1] == "=")
        {
            //TODO: Something mental here.
            // 1 + 2 = = 
            // 3 + 2 = | 5
            return;
        }
        else
        {
            currentCalculation.AddRange(((string[])currentInput.ToArray().Clone()).ToList().Concat(new List<string> { "=" }).ToList());
        }

        currentInput = GetResult();
        allCompletedCalculations.Add(((string[])currentCalculation.ToArray().Clone()).ToList());
        currentCalculation.Clear();
        inputIsReplaceable = true;

        return;
    }

    private void HandleDecimal()
    {
        if (inputIsReplaceable)
        {
            currentInput.Clear();
        }

        if (currentInput.Contains("."))
        {
            return;
        }

        if (currentInput.Count() == 0)
        {
            currentInput = new List<string> { "0", "." };
            inputIsReplaceable = false;
            return;
        }

        currentInput.Add(".");
        return;
    }

    private void HandleSignChange()
    {
        if (currentInput.Count == 1 && currentInput[0] == "0")
        {
            return;
        }

        if (currentInput[0] == "-")
        {
            currentInput.RemoveAt(0);
            return;
        }

        currentInput.Insert(0, "-");
        return;
    }

    private void ReplaceLastOperator(string displayText)
    {
        currentCalculation.RemoveAt(currentCalculation.Count - 1);
        currentCalculation.Add(displayText);
    }

    private bool IsADecimal(List<string> calculation)
    {
        return calculation
        .Distinct()
        .Except(new List<string> { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "-" })
        .Count() == 0;
    }
}