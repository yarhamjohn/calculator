<div class="card calculation-card">
    <div id="calculation" class="card-header calculation-card-header">
        @GetDisplayedCalculation()
    </div>
    <div id="result" class="card-body calculation-card-text">
        @GetDisplayedInput()
    </div>
</div>

@code {
    [Parameter]
    public List<string> Calculation { get; set; }

    [Parameter]
    public List<string> Input { get; set; }

    private List<string> operators = new List<string> { "+", "-", "x", "รท", "=" };

    private string GetDisplayedInput()
    {
        if (Input.Contains("."))
        {
            RemoveTrailingDecimal(Input);
        }

        if (IsADecimal(Input))
        {
            return string.Join("", ReplaceNegativeSign(Input));
        }

        throw new Exception($"Not a valid input: {string.Join(";", Input)}");
    }

    private List<string> ReplaceNegativeSign(List<string> calculation) => calculation.Select(c => c == "+/-" ? "-" : c).ToList();

    private string GetDisplayedCalculation()
    {
        if (IsADecimal(Calculation))
        {
            return "";
        }

        if (Calculation.Contains("."))
        {
            RemoveTrailingDecimal(Calculation);
        }

        var spaced = AddSpacing(Calculation);
        return string.Join("", ReplaceNegativeSign(spaced));
    }

    private void RemoveTrailingDecimal(List<string> calculation)
    {
        var decimalPosition = calculation.IndexOf(".");
        if (calculation.Count == decimalPosition + 1)
        {
            return;
        }

        if (operators.Contains(calculation[decimalPosition + 1]))
        {
            calculation.RemoveAt(decimalPosition);
        }

        return;
    }

    private List<string> AddSpacing(List<string> calculation)
    {
        var spaced = new List<string>();
        foreach (var elem in calculation)
        {
            if (operators.Contains(elem))
            {
                spaced.AddRange(new List<string> { " ", elem, " " });
            }
            else
            {
                spaced.Add(elem);
            }
        }

        return spaced;
    }

    private bool IsADecimal(List<string> calculation)
    {
        return calculation
            .Distinct()
            .Except(new List<string> { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "+/-" }).Count() == 0;
    }
}
