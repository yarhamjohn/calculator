<div class="card calculation-card">
    <div id="calculation" class="card-header calculation-card-header">
        @GetDisplayedCalculation()
    </div>
    <div id="result" class="card-body calculation-card-text">
        @Calculate()
    </div>
</div>

@code {
    [Parameter]
    public List<string> currentCalculation { get; set; }
    private List<string> operators = new List<string> { "+", "-", "x", "รท", "=" };

    private string GetDisplayedCalculation()
    {
        if (IsADecimal(currentCalculation))
        {
            return "";
        }

        return AddSpacing(currentCalculation);
    }

    private string AddSpacing(List<string> calculation)
    {
        var formatted = new StringBuilder();
        for (var i = 0; i < calculation.Count; i++)
        {
            var isNegativeSign = i == 0 && calculation[i] == "-";
            if (operators.Contains(calculation[i]) && !isNegativeSign)
            {
                formatted.Append($" {calculation[i]} ");
            }
            else
            {
                formatted.Append(calculation[i]);
            }
        }

        return formatted.ToString();
    }

    public string Calculate()
    {
        if (currentCalculation.Count == 0)
        {
            return "0";
        }

        if (IsADecimal(currentCalculation))
        {
            return string.Join("", currentCalculation).Trim();
        }

        List<string> chunks = GetCalculationChunks(currentCalculation);

        decimal runningTotal = 0;
        string activeOperator = null;
        for (int i = 0; i < chunks.Count; i++)
        {
            var isDecimal = Decimal.TryParse(chunks[i], out var chunk);

            if (isDecimal && activeOperator == null)
            {
                runningTotal = chunk;
            }
            else if (isDecimal && activeOperator != null)
            {
                switch (activeOperator)
                {
                    case "+":
                        runningTotal += chunk;
                        break;
                    case "-":
                        runningTotal -= chunk;
                        break;
                    case "x":
                        runningTotal *= chunk;
                        break;
                    case "รท":
                        runningTotal /= chunk;
                        break;
                }
            }
            else
            {
                activeOperator = chunks[i];
            }
        }

        return runningTotal.ToString();
    }

    private List<string> GetCalculationChunks(List<string> calculation)
    {
        StringBuilder activeChunk = new StringBuilder();
        List<string> chunks = new List<string>();

        for (int i = 0; i < calculation.Count; i++)
        {
            if (IsADecimal(new List<string> { calculation[i] }))
            {
                activeChunk.Append(calculation[i]);
            }
            else
            {
                chunks.Add(activeChunk.ToString());
                activeChunk.Clear();
                chunks.Add(calculation[i]);
            }
        }

        return chunks;
    }

    private bool IsADecimal(List<string> calculation)
    {
        return calculation
        .Distinct()
        .Except(new List<string> { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "-" })
        .Count() == 0;
    }
}