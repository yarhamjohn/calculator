<div class="card calculation-card">
    <div id="calculation" class="card-header calculation-card-header">
        @GetDisplayedCalculation()
    </div>
    <div id="result" class="card-body calculation-card-text">
        @result
    </div>
</div>

@code {
    [Parameter]
    public List<string> currentCalculation { get; set; }

    [Parameter]
    public string result { get; set; }

    private List<string> operators = new List<string> { "+", "-", "x", "รท", "=" };

    private string GetDisplayedCalculation()
    {
        if (IsADecimal(currentCalculation))
        {
            return "";
        }

        if (currentCalculation.Contains("."))
        {
            RemoveTrailingDecimal(currentCalculation);
        }

        return AddSpacing(currentCalculation);
    }

    private void RemoveTrailingDecimal(List<string> calculation)
    {
        var decimalPosition = calculation.IndexOf(".");
        if (calculation.Count == decimalPosition + 1)
        {
            return;
        }

        if (operators.Contains(calculation[decimalPosition + 1]))
        {
            calculation.RemoveAt(decimalPosition);
        }

        return;
    }

    private string AddSpacing(List<string> calculation)
    {
        var formatted = new StringBuilder();
        for (var i = 0; i < calculation.Count; i++)
        {
            var isNegativeSign = i == 0 && calculation[i] == "-";
            if (operators.Contains(calculation[i]) && !isNegativeSign)
            {
                formatted.Append($" {calculation[i]} ");
            }
            else
            {
                formatted.Append(calculation[i]);
            }
        }

        return formatted.ToString();
    }

    private bool IsADecimal(List<string> calculation)
    {
        return calculation
        .Distinct()
        .Except(new List<string> { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "-" })
        .Count() == 0;
    }
}